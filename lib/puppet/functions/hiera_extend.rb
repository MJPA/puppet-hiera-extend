# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       A wrapper around hiera() to merge the value to the defaults if both are hashes.
#
#    For example:
#
#        $defaults = {'one' => 1, 'two', => 2}
#        # Assume 'key' has a value of {'one' => 5}
#        $merged_hash = hiera_extend('key', $defaults)
#        # The resulting hash is equivalent to:
#        # $merged_hash =  {'one' => 5, 'two' => 2}
#
#
#
Puppet::Functions.create_function(:'hiera_extend') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    if args.length < 2
      raise Puppet::ParseError, ("hiera_extend(): wrong number of arguments (#{args.length}; must be at least 2)")
    end

    # Do the normal hiera lookup
    Puppet::Parser::Functions.autoloader.loadall
    hiera_value = function_hiera(args)

    # Both returned value and default a hash?
    if hiera_value.is_a? Hash and args[1].is_a? Hash
      final_value = args[1]
      final_value.merge! hiera_value
    else
      final_value = hiera_value
    end

    # Return the final value
    final_value
  
  end
end
